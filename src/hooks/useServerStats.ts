import { useState, useEffect } from 'react';
import { getRealServerStats, formatPlayTime, measureServerPing } from '@/utils/sourceQueryApi';
import type { SourceServerInfo, SourcePlayer } from '@/utils/sourceQueryApi';

interface Player {
  name: string;
  score: number;
  kills: number;
  deaths: number;
  time: string;
  ping: number;
}

interface ServerInfo {
  name: string;
  map: string;
  players: number;
  maxPlayers: number;
  ping: number;
  status: 'online' | 'offline';
}

interface ServerStats {
  serverInfo: ServerInfo;
  players: Player[];
  isLoading: boolean;
  error: string | null;
  lastUpdate: Date | null;
}

const SERVER_IP = '45.136.205.92';
const SERVER_PORT = 27015;
const MYARENA_GAME_ID = 110421;

// –†–ï–ê–õ–¨–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CS:S —Å–µ—Ä–≤–µ—Ä—É 45.136.205.92:27015
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É Source Query API
const fetchServerData = async (): Promise<{ serverInfo: ServerInfo; players: Player[] }> => {
  try {
    console.log(`üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ${SERVER_IP}:${SERVER_PORT}...`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤
    const result = await getRealServerStats();
    
    if (result.success) {
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ ${result.source}:`, result);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const serverInfo: ServerInfo = {
        name: result.serverInfo.name,
        map: result.serverInfo.map,
        players: result.serverInfo.players,
        maxPlayers: result.serverInfo.maxPlayers,
        ping: result.serverInfo.ping,
        status: result.serverInfo.players > 0 || result.success ? 'online' : 'offline'
      };

      const players: Player[] = result.players.map(player => ({
        name: player.name,
        score: player.score,
        kills: player.kills || Math.floor(player.score * 0.7),
        deaths: player.deaths || Math.floor(player.score * 0.5),
        time: formatPlayTime(player.duration),
        ping: player.ping || 50
      }));

      return { serverInfo, players };
    } else {
      throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
const measurePing = async (): Promise<number> => {
  try {
    return await measureServerPing();
  } catch {
    return 999;
  }
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const debugServerConnection = async (): Promise<void> => {
  console.log('üîß –û—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
  console.log(`üìç –°–µ—Ä–≤–µ—Ä: ${SERVER_IP}:${SERVER_PORT}`);
  console.log(`üÜî MyArena ID: ${MYARENA_GAME_ID}`);
  
  const ping = await measurePing();
  console.log(`üì° –ü–∏–Ω–≥: ${ping}ms`);
};

export const useServerStats = (autoRefresh = true, refreshInterval = 30000) => {
  const [stats, setStats] = useState<ServerStats>({
    serverInfo: {
      name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
      map: '---',
      players: 0,
      maxPlayers: 32,
      ping: 0,
      status: 'offline'
    },
    players: [],
    isLoading: true,
    error: null,
    lastUpdate: null
  });

  const fetchStats = async () => {
    try {
      setStats(prev => ({ ...prev, isLoading: true, error: null }));
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
      if (process.env.NODE_ENV === 'development') {
        await debugServerConnection();
      }
      
      const { serverInfo, players } = await fetchServerData();
      
      setStats({
        serverInfo,
        players,
        isLoading: false,
        error: null,
        lastUpdate: new Date()
      });
      
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ ${SERVER_IP}:${SERVER_PORT} –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, { 
        serverInfo, 
        playersCount: players.length,
        realPlayers: players.filter(p => !p.name.includes('Bot')).length 
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å ${SERVER_IP}:${SERVER_PORT}:`, error);
      
      setStats(prev => ({
        ...prev,
        isLoading: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É',
        serverInfo: { 
          name: '–†–ï–ê–õ–¨–ù–´–ï –ü–ê–¶–ê–ù–´ –ò–ó 90-—Ö [PUBLIC PRO] v34',
          map: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          players: 0,
          maxPlayers: 32,
          ping: 999,
          status: 'offline' 
        }
      }));
    }
  };

  useEffect(() => {
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    fetchStats();
    
    if (autoRefresh) {
      const interval = setInterval(fetchStats, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [autoRefresh, refreshInterval]);

  return {
    ...stats,
    refetch: fetchStats,
    serverIp: SERVER_IP
  };
};